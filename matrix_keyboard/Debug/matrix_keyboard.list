
matrix_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08000f9c  08000f9c  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001074  08001074  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001074  08001074  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001074  08001074  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001074  08001074  00002074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001078  08001078  00002078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800107c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000099a  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000346  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00003d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d62  00000000  00000000  00003f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001453  00000000  00000000  00006caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000994d  00000000  00000000  00008102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011a4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  00011a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00012490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f84 	.word	0x08000f84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000f84 	.word	0x08000f84

080001c8 <main>:
#define C3 10
#define C4 11

static void delay(void);

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	printf("\n\nProgram starting...\n\n");
 80001ce:	4880      	ldr	r0, [pc, #512]	@ (80003d0 <main+0x208>)
 80001d0:	f000 fb48 	bl	8000864 <puts>
	// address to PORT D Clock register
	volatile uint32_t *const pRCC_AHB1ENR = (volatile uint32_t* const ) 0x40023830;
 80001d4:	4b7f      	ldr	r3, [pc, #508]	@ (80003d4 <main+0x20c>)
 80001d6:	617b      	str	r3, [r7, #20]
	// address to PORT D Mode register
	volatile uint32_t *const pGPIOD_MODER = (volatile uint32_t* const ) 0x40020C00;
 80001d8:	4b7f      	ldr	r3, [pc, #508]	@ (80003d8 <main+0x210>)
 80001da:	613b      	str	r3, [r7, #16]
	// address to PORT D Output Data register
	volatile uint32_t *const pGPIOD_ODR = (volatile uint32_t* const ) 0x40020C14;
 80001dc:	4b7f      	ldr	r3, [pc, #508]	@ (80003dc <main+0x214>)
 80001de:	60fb      	str	r3, [r7, #12]
	// address to PORT D Input Data register
	volatile uint32_t *const pGPIOD_IDR = (volatile uint32_t* const ) 0x40020C10;
 80001e0:	4b7f      	ldr	r3, [pc, #508]	@ (80003e0 <main+0x218>)
 80001e2:	60bb      	str	r3, [r7, #8]
	// address to PORT D pull-up/pull-down register
	volatile uint32_t *const pGPIOD_PUPDR = (volatile uint32_t* const ) 0x40020C0C;
 80001e4:	4b7f      	ldr	r3, [pc, #508]	@ (80003e4 <main+0x21c>)
 80001e6:	607b      	str	r3, [r7, #4]

	// enable port D Clock
	*pRCC_AHB1ENR |= MASK(3);
 80001e8:	697b      	ldr	r3, [r7, #20]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f043 0208 	orr.w	r2, r3, #8
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	601a      	str	r2, [r3, #0]

	// set PD8 to PD11 mode as input mode(thus, the columns)
	*pGPIOD_MODER &= ~(MASK_POS(0x3, C1*2) | MASK_POS(0x3, C2*2) | MASK_POS(0x3, C3*2)| MASK_POS(0x3, C4*2));
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80001fc:	693b      	ldr	r3, [r7, #16]
 80001fe:	601a      	str	r2, [r3, #0]

	// set PD0 to PD3 mode as out mode(thus rows)
	*pGPIOD_MODER |= (MASK_POS(0x1, R1*2) | MASK_POS(0x1, R2*2) | MASK_POS(0x1, R3*2)| MASK_POS(0x1, R4*2));
 8000200:	693b      	ldr	r3, [r7, #16]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	601a      	str	r2, [r3, #0]

	// set PD8 to PD11 PUPDR as Pull Up mode(thus the columns)
	*pGPIOD_PUPDR |= (MASK_POS(0x1, C1*2) | MASK_POS(0x1, C2*2) | MASK_POS(0x1, C3*2)| MASK_POS(0x1, C4*2));
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	601a      	str	r2, [r3, #0]

	// set all the outputs to high(thus the columns)
	*pGPIOD_ODR |= (MASK(R1) | MASK(R2) | MASK(R3) | MASK(R4));
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f043 020f 	orr.w	r2, r3, #15
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	601a      	str	r2, [r3, #0]

	/* Loop forever */
	for (;;){
		*pGPIOD_ODR &= ~MASK(R1);
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f023 0201 	bic.w	r2, r3, #1
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	601a      	str	r2, [r3, #0]
		if(!(*pGPIOD_IDR & MASK(C1))){
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000238:	2b00      	cmp	r3, #0
 800023a:	d103      	bne.n	8000244 <main+0x7c>
			printf("Key is 1\n");
 800023c:	486a      	ldr	r0, [pc, #424]	@ (80003e8 <main+0x220>)
 800023e:	f000 fb11 	bl	8000864 <puts>
 8000242:	e01c      	b.n	800027e <main+0xb6>
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <main+0x90>
			printf("Key is 2\n");
 8000250:	4866      	ldr	r0, [pc, #408]	@ (80003ec <main+0x224>)
 8000252:	f000 fb07 	bl	8000864 <puts>
 8000256:	e012      	b.n	800027e <main+0xb6>
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000260:	2b00      	cmp	r3, #0
 8000262:	d103      	bne.n	800026c <main+0xa4>
			printf("Key is 3\n");
 8000264:	4862      	ldr	r0, [pc, #392]	@ (80003f0 <main+0x228>)
 8000266:	f000 fafd 	bl	8000864 <puts>
 800026a:	e008      	b.n	800027e <main+0xb6>
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <main+0xb6>
			printf("Key is A\n");
 8000278:	485e      	ldr	r0, [pc, #376]	@ (80003f4 <main+0x22c>)
 800027a:	f000 faf3 	bl	8000864 <puts>
		}

		delay();
 800027e:	f000 f8d3 	bl	8000428 <delay>


		*pGPIOD_ODR |= MASK(R1);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 0201 	orr.w	r2, r3, #1
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
		*pGPIOD_ODR &= ~MASK(R2);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f023 0202 	bic.w	r2, r3, #2
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
		if(!(*pGPIOD_IDR & MASK(C1))){
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d103      	bne.n	80002ae <main+0xe6>
			printf("Key is 4\n");
 80002a6:	4854      	ldr	r0, [pc, #336]	@ (80003f8 <main+0x230>)
 80002a8:	f000 fadc 	bl	8000864 <puts>
 80002ac:	e01c      	b.n	80002e8 <main+0x120>
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d103      	bne.n	80002c2 <main+0xfa>
			printf("Key is 5\n");
 80002ba:	4850      	ldr	r0, [pc, #320]	@ (80003fc <main+0x234>)
 80002bc:	f000 fad2 	bl	8000864 <puts>
 80002c0:	e012      	b.n	80002e8 <main+0x120>
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d103      	bne.n	80002d6 <main+0x10e>
			printf("Key is 6\n");
 80002ce:	484c      	ldr	r0, [pc, #304]	@ (8000400 <main+0x238>)
 80002d0:	f000 fac8 	bl	8000864 <puts>
 80002d4:	e008      	b.n	80002e8 <main+0x120>
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d102      	bne.n	80002e8 <main+0x120>
			printf("Key is B\n");
 80002e2:	4848      	ldr	r0, [pc, #288]	@ (8000404 <main+0x23c>)
 80002e4:	f000 fabe 	bl	8000864 <puts>
		}

		delay();
 80002e8:	f000 f89e 	bl	8000428 <delay>


		*pGPIOD_ODR |= MASK(R2);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f043 0202 	orr.w	r2, r3, #2
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	601a      	str	r2, [r3, #0]
		*pGPIOD_ODR &= ~MASK(R3);
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f023 0204 	bic.w	r2, r3, #4
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	601a      	str	r2, [r3, #0]
		if(!(*pGPIOD_IDR & MASK(C1))){
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800030c:	2b00      	cmp	r3, #0
 800030e:	d103      	bne.n	8000318 <main+0x150>
			printf("Key is 7\n");
 8000310:	483d      	ldr	r0, [pc, #244]	@ (8000408 <main+0x240>)
 8000312:	f000 faa7 	bl	8000864 <puts>
 8000316:	e01c      	b.n	8000352 <main+0x18a>
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000320:	2b00      	cmp	r3, #0
 8000322:	d103      	bne.n	800032c <main+0x164>
			printf("Key is 8\n");
 8000324:	4839      	ldr	r0, [pc, #228]	@ (800040c <main+0x244>)
 8000326:	f000 fa9d 	bl	8000864 <puts>
 800032a:	e012      	b.n	8000352 <main+0x18a>
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000334:	2b00      	cmp	r3, #0
 8000336:	d103      	bne.n	8000340 <main+0x178>
			printf("Key is 9\n");
 8000338:	4835      	ldr	r0, [pc, #212]	@ (8000410 <main+0x248>)
 800033a:	f000 fa93 	bl	8000864 <puts>
 800033e:	e008      	b.n	8000352 <main+0x18a>
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000348:	2b00      	cmp	r3, #0
 800034a:	d102      	bne.n	8000352 <main+0x18a>
			printf("Key is C\n");
 800034c:	4831      	ldr	r0, [pc, #196]	@ (8000414 <main+0x24c>)
 800034e:	f000 fa89 	bl	8000864 <puts>
		}

		delay();
 8000352:	f000 f869 	bl	8000428 <delay>


		*pGPIOD_ODR |= MASK(R3);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 0204 	orr.w	r2, r3, #4
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
		*pGPIOD_ODR &= ~MASK(R4);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 0208 	bic.w	r2, r3, #8
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]
		if(!(*pGPIOD_IDR & MASK(C1))){
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000376:	2b00      	cmp	r3, #0
 8000378:	d103      	bne.n	8000382 <main+0x1ba>
			printf("Key is *\n");
 800037a:	4827      	ldr	r0, [pc, #156]	@ (8000418 <main+0x250>)
 800037c:	f000 fa72 	bl	8000864 <puts>
 8000380:	e01c      	b.n	80003bc <main+0x1f4>
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800038a:	2b00      	cmp	r3, #0
 800038c:	d103      	bne.n	8000396 <main+0x1ce>
			printf("Key is 0\n");
 800038e:	4823      	ldr	r0, [pc, #140]	@ (800041c <main+0x254>)
 8000390:	f000 fa68 	bl	8000864 <puts>
 8000394:	e012      	b.n	80003bc <main+0x1f4>
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d103      	bne.n	80003aa <main+0x1e2>
			printf("Key is #\n");
 80003a2:	481f      	ldr	r0, [pc, #124]	@ (8000420 <main+0x258>)
 80003a4:	f000 fa5e 	bl	8000864 <puts>
 80003a8:	e008      	b.n	80003bc <main+0x1f4>
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d102      	bne.n	80003bc <main+0x1f4>
			printf("Key is D\n");
 80003b6:	481b      	ldr	r0, [pc, #108]	@ (8000424 <main+0x25c>)
 80003b8:	f000 fa54 	bl	8000864 <puts>
		}

		delay();
 80003bc:	f000 f834 	bl	8000428 <delay>

		*pGPIOD_ODR |= MASK(R4);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 0208 	orr.w	r2, r3, #8
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	601a      	str	r2, [r3, #0]
		*pGPIOD_ODR &= ~MASK(R1);
 80003cc:	e72a      	b.n	8000224 <main+0x5c>
 80003ce:	bf00      	nop
 80003d0:	08000f9c 	.word	0x08000f9c
 80003d4:	40023830 	.word	0x40023830
 80003d8:	40020c00 	.word	0x40020c00
 80003dc:	40020c14 	.word	0x40020c14
 80003e0:	40020c10 	.word	0x40020c10
 80003e4:	40020c0c 	.word	0x40020c0c
 80003e8:	08000fb4 	.word	0x08000fb4
 80003ec:	08000fc0 	.word	0x08000fc0
 80003f0:	08000fcc 	.word	0x08000fcc
 80003f4:	08000fd8 	.word	0x08000fd8
 80003f8:	08000fe4 	.word	0x08000fe4
 80003fc:	08000ff0 	.word	0x08000ff0
 8000400:	08000ffc 	.word	0x08000ffc
 8000404:	08001008 	.word	0x08001008
 8000408:	08001014 	.word	0x08001014
 800040c:	08001020 	.word	0x08001020
 8000410:	0800102c 	.word	0x0800102c
 8000414:	08001038 	.word	0x08001038
 8000418:	08001044 	.word	0x08001044
 800041c:	08001050 	.word	0x08001050
 8000420:	0800105c 	.word	0x0800105c
 8000424:	08001068 	.word	0x08001068

08000428 <delay>:
	}
}

static void delay(void){
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 105000; ++i);
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e002      	b.n	800043a <delay+0x12>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3301      	adds	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <delay+0x28>)
 800043e:	4293      	cmp	r3, r2
 8000440:	ddf8      	ble.n	8000434 <delay+0xc>
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	00019a27 	.word	0x00019a27

08000454 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <ITM_SendChar+0x44>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <ITM_SendChar+0x44>)
 8000464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000468:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800046a:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <ITM_SendChar+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a0b      	ldr	r2, [pc, #44]	@ (800049c <ITM_SendChar+0x48>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000476:	bf00      	nop
 8000478:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f8      	beq.n	8000478 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000486:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	6013      	str	r3, [r2, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	e000edfc 	.word	0xe000edfc
 800049c:	e0000e00 	.word	0xe0000e00

080004a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	e00a      	b.n	80004c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004b2:	f3af 8000 	nop.w
 80004b6:	4601      	mov	r1, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf0      	blt.n	80004b2 <_read+0x12>
  }

  return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e009      	b.n	8000500 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ffad 	bl	8000454 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf1      	blt.n	80004ec <_write+0x12>
  }
  return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_close>:

int _close(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000538:	605a      	str	r2, [r3, #4]
  return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_isatty>:

int _isatty(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800057c:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <_sbrk+0x5c>)
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <_sbrk+0x60>)
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <_sbrk+0x64>)
 8000592:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <_sbrk+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d207      	bcs.n	80005b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a4:	f000 f96e 	bl	8000884 <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b2:	e009      	b.n	80005c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	@ (80005d8 <_sbrk+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20020000 	.word	0x20020000
 80005d4:	00000400 	.word	0x00000400
 80005d8:	20000078 	.word	0x20000078
 80005dc:	200001c8 	.word	0x200001c8

080005e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	@ (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	@ (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	@ (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	@ (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800060e:	f000 f93f 	bl	8000890 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000612:	f7ff fdd9 	bl	80001c8 <main>

08000616 <LoopForever>:

LoopForever:
  b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000624:	0800107c 	.word	0x0800107c
  ldr r2, =_sbss
 8000628:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800062c:	200001c8 	.word	0x200001c8

08000630 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>
	...

08000634 <std>:
 8000634:	2300      	movs	r3, #0
 8000636:	b510      	push	{r4, lr}
 8000638:	4604      	mov	r4, r0
 800063a:	e9c0 3300 	strd	r3, r3, [r0]
 800063e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000642:	6083      	str	r3, [r0, #8]
 8000644:	8181      	strh	r1, [r0, #12]
 8000646:	6643      	str	r3, [r0, #100]	@ 0x64
 8000648:	81c2      	strh	r2, [r0, #14]
 800064a:	6183      	str	r3, [r0, #24]
 800064c:	4619      	mov	r1, r3
 800064e:	2208      	movs	r2, #8
 8000650:	305c      	adds	r0, #92	@ 0x5c
 8000652:	f000 f90f 	bl	8000874 <memset>
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <std+0x58>)
 8000658:	6263      	str	r3, [r4, #36]	@ 0x24
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <std+0x5c>)
 800065c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <std+0x60>)
 8000660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <std+0x64>)
 8000664:	6323      	str	r3, [r4, #48]	@ 0x30
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <std+0x68>)
 8000668:	6224      	str	r4, [r4, #32]
 800066a:	429c      	cmp	r4, r3
 800066c:	d006      	beq.n	800067c <std+0x48>
 800066e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000672:	4294      	cmp	r4, r2
 8000674:	d002      	beq.n	800067c <std+0x48>
 8000676:	33d0      	adds	r3, #208	@ 0xd0
 8000678:	429c      	cmp	r4, r3
 800067a:	d105      	bne.n	8000688 <std+0x54>
 800067c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f000 b928 	b.w	80008d8 <__retarget_lock_init_recursive>
 8000688:	bd10      	pop	{r4, pc}
 800068a:	bf00      	nop
 800068c:	08000b8d 	.word	0x08000b8d
 8000690:	08000baf 	.word	0x08000baf
 8000694:	08000be7 	.word	0x08000be7
 8000698:	08000c0b 	.word	0x08000c0b
 800069c:	2000007c 	.word	0x2000007c

080006a0 <stdio_exit_handler>:
 80006a0:	4a02      	ldr	r2, [pc, #8]	@ (80006ac <stdio_exit_handler+0xc>)
 80006a2:	4903      	ldr	r1, [pc, #12]	@ (80006b0 <stdio_exit_handler+0x10>)
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <stdio_exit_handler+0x14>)
 80006a6:	f000 b869 	b.w	800077c <_fwalk_sglue>
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000
 80006b0:	08000b25 	.word	0x08000b25
 80006b4:	20000010 	.word	0x20000010

080006b8 <cleanup_stdio>:
 80006b8:	6841      	ldr	r1, [r0, #4]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <cleanup_stdio+0x34>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	b510      	push	{r4, lr}
 80006c0:	4604      	mov	r4, r0
 80006c2:	d001      	beq.n	80006c8 <cleanup_stdio+0x10>
 80006c4:	f000 fa2e 	bl	8000b24 <_fflush_r>
 80006c8:	68a1      	ldr	r1, [r4, #8]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <cleanup_stdio+0x38>)
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d002      	beq.n	80006d6 <cleanup_stdio+0x1e>
 80006d0:	4620      	mov	r0, r4
 80006d2:	f000 fa27 	bl	8000b24 <_fflush_r>
 80006d6:	68e1      	ldr	r1, [r4, #12]
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <cleanup_stdio+0x3c>)
 80006da:	4299      	cmp	r1, r3
 80006dc:	d004      	beq.n	80006e8 <cleanup_stdio+0x30>
 80006de:	4620      	mov	r0, r4
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e4:	f000 ba1e 	b.w	8000b24 <_fflush_r>
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	bf00      	nop
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	200000e4 	.word	0x200000e4
 80006f4:	2000014c 	.word	0x2000014c

080006f8 <global_stdio_init.part.0>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <global_stdio_init.part.0+0x30>)
 80006fc:	4c0b      	ldr	r4, [pc, #44]	@ (800072c <global_stdio_init.part.0+0x34>)
 80006fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <global_stdio_init.part.0+0x38>)
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	4620      	mov	r0, r4
 8000704:	2200      	movs	r2, #0
 8000706:	2104      	movs	r1, #4
 8000708:	f7ff ff94 	bl	8000634 <std>
 800070c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000710:	2201      	movs	r2, #1
 8000712:	2109      	movs	r1, #9
 8000714:	f7ff ff8e 	bl	8000634 <std>
 8000718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800071c:	2202      	movs	r2, #2
 800071e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000722:	2112      	movs	r1, #18
 8000724:	f7ff bf86 	b.w	8000634 <std>
 8000728:	200001b4 	.word	0x200001b4
 800072c:	2000007c 	.word	0x2000007c
 8000730:	080006a1 	.word	0x080006a1

08000734 <__sfp_lock_acquire>:
 8000734:	4801      	ldr	r0, [pc, #4]	@ (800073c <__sfp_lock_acquire+0x8>)
 8000736:	f000 b8d0 	b.w	80008da <__retarget_lock_acquire_recursive>
 800073a:	bf00      	nop
 800073c:	200001b9 	.word	0x200001b9

08000740 <__sfp_lock_release>:
 8000740:	4801      	ldr	r0, [pc, #4]	@ (8000748 <__sfp_lock_release+0x8>)
 8000742:	f000 b8cb 	b.w	80008dc <__retarget_lock_release_recursive>
 8000746:	bf00      	nop
 8000748:	200001b9 	.word	0x200001b9

0800074c <__sinit>:
 800074c:	b510      	push	{r4, lr}
 800074e:	4604      	mov	r4, r0
 8000750:	f7ff fff0 	bl	8000734 <__sfp_lock_acquire>
 8000754:	6a23      	ldr	r3, [r4, #32]
 8000756:	b11b      	cbz	r3, 8000760 <__sinit+0x14>
 8000758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800075c:	f7ff bff0 	b.w	8000740 <__sfp_lock_release>
 8000760:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <__sinit+0x28>)
 8000762:	6223      	str	r3, [r4, #32]
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <__sinit+0x2c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f5      	bne.n	8000758 <__sinit+0xc>
 800076c:	f7ff ffc4 	bl	80006f8 <global_stdio_init.part.0>
 8000770:	e7f2      	b.n	8000758 <__sinit+0xc>
 8000772:	bf00      	nop
 8000774:	080006b9 	.word	0x080006b9
 8000778:	200001b4 	.word	0x200001b4

0800077c <_fwalk_sglue>:
 800077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000780:	4607      	mov	r7, r0
 8000782:	4688      	mov	r8, r1
 8000784:	4614      	mov	r4, r2
 8000786:	2600      	movs	r6, #0
 8000788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800078c:	f1b9 0901 	subs.w	r9, r9, #1
 8000790:	d505      	bpl.n	800079e <_fwalk_sglue+0x22>
 8000792:	6824      	ldr	r4, [r4, #0]
 8000794:	2c00      	cmp	r4, #0
 8000796:	d1f7      	bne.n	8000788 <_fwalk_sglue+0xc>
 8000798:	4630      	mov	r0, r6
 800079a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800079e:	89ab      	ldrh	r3, [r5, #12]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d907      	bls.n	80007b4 <_fwalk_sglue+0x38>
 80007a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007a8:	3301      	adds	r3, #1
 80007aa:	d003      	beq.n	80007b4 <_fwalk_sglue+0x38>
 80007ac:	4629      	mov	r1, r5
 80007ae:	4638      	mov	r0, r7
 80007b0:	47c0      	blx	r8
 80007b2:	4306      	orrs	r6, r0
 80007b4:	3568      	adds	r5, #104	@ 0x68
 80007b6:	e7e9      	b.n	800078c <_fwalk_sglue+0x10>

080007b8 <_puts_r>:
 80007b8:	6a03      	ldr	r3, [r0, #32]
 80007ba:	b570      	push	{r4, r5, r6, lr}
 80007bc:	6884      	ldr	r4, [r0, #8]
 80007be:	4605      	mov	r5, r0
 80007c0:	460e      	mov	r6, r1
 80007c2:	b90b      	cbnz	r3, 80007c8 <_puts_r+0x10>
 80007c4:	f7ff ffc2 	bl	800074c <__sinit>
 80007c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007ca:	07db      	lsls	r3, r3, #31
 80007cc:	d405      	bmi.n	80007da <_puts_r+0x22>
 80007ce:	89a3      	ldrh	r3, [r4, #12]
 80007d0:	0598      	lsls	r0, r3, #22
 80007d2:	d402      	bmi.n	80007da <_puts_r+0x22>
 80007d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007d6:	f000 f880 	bl	80008da <__retarget_lock_acquire_recursive>
 80007da:	89a3      	ldrh	r3, [r4, #12]
 80007dc:	0719      	lsls	r1, r3, #28
 80007de:	d502      	bpl.n	80007e6 <_puts_r+0x2e>
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d135      	bne.n	8000852 <_puts_r+0x9a>
 80007e6:	4621      	mov	r1, r4
 80007e8:	4628      	mov	r0, r5
 80007ea:	f000 fa51 	bl	8000c90 <__swsetup_r>
 80007ee:	b380      	cbz	r0, 8000852 <_puts_r+0x9a>
 80007f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80007f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007f6:	07da      	lsls	r2, r3, #31
 80007f8:	d405      	bmi.n	8000806 <_puts_r+0x4e>
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	059b      	lsls	r3, r3, #22
 80007fe:	d402      	bmi.n	8000806 <_puts_r+0x4e>
 8000800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000802:	f000 f86b 	bl	80008dc <__retarget_lock_release_recursive>
 8000806:	4628      	mov	r0, r5
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	2b00      	cmp	r3, #0
 800080c:	da04      	bge.n	8000818 <_puts_r+0x60>
 800080e:	69a2      	ldr	r2, [r4, #24]
 8000810:	429a      	cmp	r2, r3
 8000812:	dc17      	bgt.n	8000844 <_puts_r+0x8c>
 8000814:	290a      	cmp	r1, #10
 8000816:	d015      	beq.n	8000844 <_puts_r+0x8c>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	6022      	str	r2, [r4, #0]
 800081e:	7019      	strb	r1, [r3, #0]
 8000820:	68a3      	ldr	r3, [r4, #8]
 8000822:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000826:	3b01      	subs	r3, #1
 8000828:	60a3      	str	r3, [r4, #8]
 800082a:	2900      	cmp	r1, #0
 800082c:	d1ed      	bne.n	800080a <_puts_r+0x52>
 800082e:	2b00      	cmp	r3, #0
 8000830:	da11      	bge.n	8000856 <_puts_r+0x9e>
 8000832:	4622      	mov	r2, r4
 8000834:	210a      	movs	r1, #10
 8000836:	4628      	mov	r0, r5
 8000838:	f000 f9eb 	bl	8000c12 <__swbuf_r>
 800083c:	3001      	adds	r0, #1
 800083e:	d0d7      	beq.n	80007f0 <_puts_r+0x38>
 8000840:	250a      	movs	r5, #10
 8000842:	e7d7      	b.n	80007f4 <_puts_r+0x3c>
 8000844:	4622      	mov	r2, r4
 8000846:	4628      	mov	r0, r5
 8000848:	f000 f9e3 	bl	8000c12 <__swbuf_r>
 800084c:	3001      	adds	r0, #1
 800084e:	d1e7      	bne.n	8000820 <_puts_r+0x68>
 8000850:	e7ce      	b.n	80007f0 <_puts_r+0x38>
 8000852:	3e01      	subs	r6, #1
 8000854:	e7e4      	b.n	8000820 <_puts_r+0x68>
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	6022      	str	r2, [r4, #0]
 800085c:	220a      	movs	r2, #10
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	e7ee      	b.n	8000840 <_puts_r+0x88>
	...

08000864 <puts>:
 8000864:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <puts+0xc>)
 8000866:	4601      	mov	r1, r0
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f7ff bfa5 	b.w	80007b8 <_puts_r>
 800086e:	bf00      	nop
 8000870:	2000000c 	.word	0x2000000c

08000874 <memset>:
 8000874:	4402      	add	r2, r0
 8000876:	4603      	mov	r3, r0
 8000878:	4293      	cmp	r3, r2
 800087a:	d100      	bne.n	800087e <memset+0xa>
 800087c:	4770      	bx	lr
 800087e:	f803 1b01 	strb.w	r1, [r3], #1
 8000882:	e7f9      	b.n	8000878 <memset+0x4>

08000884 <__errno>:
 8000884:	4b01      	ldr	r3, [pc, #4]	@ (800088c <__errno+0x8>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000000c 	.word	0x2000000c

08000890 <__libc_init_array>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	4d0d      	ldr	r5, [pc, #52]	@ (80008c8 <__libc_init_array+0x38>)
 8000894:	4c0d      	ldr	r4, [pc, #52]	@ (80008cc <__libc_init_array+0x3c>)
 8000896:	1b64      	subs	r4, r4, r5
 8000898:	10a4      	asrs	r4, r4, #2
 800089a:	2600      	movs	r6, #0
 800089c:	42a6      	cmp	r6, r4
 800089e:	d109      	bne.n	80008b4 <__libc_init_array+0x24>
 80008a0:	4d0b      	ldr	r5, [pc, #44]	@ (80008d0 <__libc_init_array+0x40>)
 80008a2:	4c0c      	ldr	r4, [pc, #48]	@ (80008d4 <__libc_init_array+0x44>)
 80008a4:	f000 fb6e 	bl	8000f84 <_init>
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	10a4      	asrs	r4, r4, #2
 80008ac:	2600      	movs	r6, #0
 80008ae:	42a6      	cmp	r6, r4
 80008b0:	d105      	bne.n	80008be <__libc_init_array+0x2e>
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b8:	4798      	blx	r3
 80008ba:	3601      	adds	r6, #1
 80008bc:	e7ee      	b.n	800089c <__libc_init_array+0xc>
 80008be:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c2:	4798      	blx	r3
 80008c4:	3601      	adds	r6, #1
 80008c6:	e7f2      	b.n	80008ae <__libc_init_array+0x1e>
 80008c8:	08001074 	.word	0x08001074
 80008cc:	08001074 	.word	0x08001074
 80008d0:	08001074 	.word	0x08001074
 80008d4:	08001078 	.word	0x08001078

080008d8 <__retarget_lock_init_recursive>:
 80008d8:	4770      	bx	lr

080008da <__retarget_lock_acquire_recursive>:
 80008da:	4770      	bx	lr

080008dc <__retarget_lock_release_recursive>:
 80008dc:	4770      	bx	lr
	...

080008e0 <sbrk_aligned>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	4e0f      	ldr	r6, [pc, #60]	@ (8000920 <sbrk_aligned+0x40>)
 80008e4:	460c      	mov	r4, r1
 80008e6:	6831      	ldr	r1, [r6, #0]
 80008e8:	4605      	mov	r5, r0
 80008ea:	b911      	cbnz	r1, 80008f2 <sbrk_aligned+0x12>
 80008ec:	f000 fabc 	bl	8000e68 <_sbrk_r>
 80008f0:	6030      	str	r0, [r6, #0]
 80008f2:	4621      	mov	r1, r4
 80008f4:	4628      	mov	r0, r5
 80008f6:	f000 fab7 	bl	8000e68 <_sbrk_r>
 80008fa:	1c43      	adds	r3, r0, #1
 80008fc:	d103      	bne.n	8000906 <sbrk_aligned+0x26>
 80008fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000902:	4620      	mov	r0, r4
 8000904:	bd70      	pop	{r4, r5, r6, pc}
 8000906:	1cc4      	adds	r4, r0, #3
 8000908:	f024 0403 	bic.w	r4, r4, #3
 800090c:	42a0      	cmp	r0, r4
 800090e:	d0f8      	beq.n	8000902 <sbrk_aligned+0x22>
 8000910:	1a21      	subs	r1, r4, r0
 8000912:	4628      	mov	r0, r5
 8000914:	f000 faa8 	bl	8000e68 <_sbrk_r>
 8000918:	3001      	adds	r0, #1
 800091a:	d1f2      	bne.n	8000902 <sbrk_aligned+0x22>
 800091c:	e7ef      	b.n	80008fe <sbrk_aligned+0x1e>
 800091e:	bf00      	nop
 8000920:	200001bc 	.word	0x200001bc

08000924 <_malloc_r>:
 8000924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000928:	1ccd      	adds	r5, r1, #3
 800092a:	f025 0503 	bic.w	r5, r5, #3
 800092e:	3508      	adds	r5, #8
 8000930:	2d0c      	cmp	r5, #12
 8000932:	bf38      	it	cc
 8000934:	250c      	movcc	r5, #12
 8000936:	2d00      	cmp	r5, #0
 8000938:	4606      	mov	r6, r0
 800093a:	db01      	blt.n	8000940 <_malloc_r+0x1c>
 800093c:	42a9      	cmp	r1, r5
 800093e:	d904      	bls.n	800094a <_malloc_r+0x26>
 8000940:	230c      	movs	r3, #12
 8000942:	6033      	str	r3, [r6, #0]
 8000944:	2000      	movs	r0, #0
 8000946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800094a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a20 <_malloc_r+0xfc>
 800094e:	f000 f911 	bl	8000b74 <__malloc_lock>
 8000952:	f8d8 3000 	ldr.w	r3, [r8]
 8000956:	461c      	mov	r4, r3
 8000958:	bb44      	cbnz	r4, 80009ac <_malloc_r+0x88>
 800095a:	4629      	mov	r1, r5
 800095c:	4630      	mov	r0, r6
 800095e:	f7ff ffbf 	bl	80008e0 <sbrk_aligned>
 8000962:	1c43      	adds	r3, r0, #1
 8000964:	4604      	mov	r4, r0
 8000966:	d158      	bne.n	8000a1a <_malloc_r+0xf6>
 8000968:	f8d8 4000 	ldr.w	r4, [r8]
 800096c:	4627      	mov	r7, r4
 800096e:	2f00      	cmp	r7, #0
 8000970:	d143      	bne.n	80009fa <_malloc_r+0xd6>
 8000972:	2c00      	cmp	r4, #0
 8000974:	d04b      	beq.n	8000a0e <_malloc_r+0xea>
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	4639      	mov	r1, r7
 800097a:	4630      	mov	r0, r6
 800097c:	eb04 0903 	add.w	r9, r4, r3
 8000980:	f000 fa72 	bl	8000e68 <_sbrk_r>
 8000984:	4581      	cmp	r9, r0
 8000986:	d142      	bne.n	8000a0e <_malloc_r+0xea>
 8000988:	6821      	ldr	r1, [r4, #0]
 800098a:	1a6d      	subs	r5, r5, r1
 800098c:	4629      	mov	r1, r5
 800098e:	4630      	mov	r0, r6
 8000990:	f7ff ffa6 	bl	80008e0 <sbrk_aligned>
 8000994:	3001      	adds	r0, #1
 8000996:	d03a      	beq.n	8000a0e <_malloc_r+0xea>
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	442b      	add	r3, r5
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	f8d8 3000 	ldr.w	r3, [r8]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	bb62      	cbnz	r2, 8000a00 <_malloc_r+0xdc>
 80009a6:	f8c8 7000 	str.w	r7, [r8]
 80009aa:	e00f      	b.n	80009cc <_malloc_r+0xa8>
 80009ac:	6822      	ldr	r2, [r4, #0]
 80009ae:	1b52      	subs	r2, r2, r5
 80009b0:	d420      	bmi.n	80009f4 <_malloc_r+0xd0>
 80009b2:	2a0b      	cmp	r2, #11
 80009b4:	d917      	bls.n	80009e6 <_malloc_r+0xc2>
 80009b6:	1961      	adds	r1, r4, r5
 80009b8:	42a3      	cmp	r3, r4
 80009ba:	6025      	str	r5, [r4, #0]
 80009bc:	bf18      	it	ne
 80009be:	6059      	strne	r1, [r3, #4]
 80009c0:	6863      	ldr	r3, [r4, #4]
 80009c2:	bf08      	it	eq
 80009c4:	f8c8 1000 	streq.w	r1, [r8]
 80009c8:	5162      	str	r2, [r4, r5]
 80009ca:	604b      	str	r3, [r1, #4]
 80009cc:	4630      	mov	r0, r6
 80009ce:	f000 f8d7 	bl	8000b80 <__malloc_unlock>
 80009d2:	f104 000b 	add.w	r0, r4, #11
 80009d6:	1d23      	adds	r3, r4, #4
 80009d8:	f020 0007 	bic.w	r0, r0, #7
 80009dc:	1ac2      	subs	r2, r0, r3
 80009de:	bf1c      	itt	ne
 80009e0:	1a1b      	subne	r3, r3, r0
 80009e2:	50a3      	strne	r3, [r4, r2]
 80009e4:	e7af      	b.n	8000946 <_malloc_r+0x22>
 80009e6:	6862      	ldr	r2, [r4, #4]
 80009e8:	42a3      	cmp	r3, r4
 80009ea:	bf0c      	ite	eq
 80009ec:	f8c8 2000 	streq.w	r2, [r8]
 80009f0:	605a      	strne	r2, [r3, #4]
 80009f2:	e7eb      	b.n	80009cc <_malloc_r+0xa8>
 80009f4:	4623      	mov	r3, r4
 80009f6:	6864      	ldr	r4, [r4, #4]
 80009f8:	e7ae      	b.n	8000958 <_malloc_r+0x34>
 80009fa:	463c      	mov	r4, r7
 80009fc:	687f      	ldr	r7, [r7, #4]
 80009fe:	e7b6      	b.n	800096e <_malloc_r+0x4a>
 8000a00:	461a      	mov	r2, r3
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	d1fb      	bne.n	8000a00 <_malloc_r+0xdc>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6053      	str	r3, [r2, #4]
 8000a0c:	e7de      	b.n	80009cc <_malloc_r+0xa8>
 8000a0e:	230c      	movs	r3, #12
 8000a10:	6033      	str	r3, [r6, #0]
 8000a12:	4630      	mov	r0, r6
 8000a14:	f000 f8b4 	bl	8000b80 <__malloc_unlock>
 8000a18:	e794      	b.n	8000944 <_malloc_r+0x20>
 8000a1a:	6005      	str	r5, [r0, #0]
 8000a1c:	e7d6      	b.n	80009cc <_malloc_r+0xa8>
 8000a1e:	bf00      	nop
 8000a20:	200001c0 	.word	0x200001c0

08000a24 <__sflush_r>:
 8000a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	0716      	lsls	r6, r2, #28
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	460c      	mov	r4, r1
 8000a30:	d454      	bmi.n	8000adc <__sflush_r+0xb8>
 8000a32:	684b      	ldr	r3, [r1, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dc02      	bgt.n	8000a3e <__sflush_r+0x1a>
 8000a38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dd48      	ble.n	8000ad0 <__sflush_r+0xac>
 8000a3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d045      	beq.n	8000ad0 <__sflush_r+0xac>
 8000a44:	2300      	movs	r3, #0
 8000a46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000a4a:	682f      	ldr	r7, [r5, #0]
 8000a4c:	6a21      	ldr	r1, [r4, #32]
 8000a4e:	602b      	str	r3, [r5, #0]
 8000a50:	d030      	beq.n	8000ab4 <__sflush_r+0x90>
 8000a52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000a54:	89a3      	ldrh	r3, [r4, #12]
 8000a56:	0759      	lsls	r1, r3, #29
 8000a58:	d505      	bpl.n	8000a66 <__sflush_r+0x42>
 8000a5a:	6863      	ldr	r3, [r4, #4]
 8000a5c:	1ad2      	subs	r2, r2, r3
 8000a5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000a60:	b10b      	cbz	r3, 8000a66 <__sflush_r+0x42>
 8000a62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	2300      	movs	r3, #0
 8000a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a6a:	6a21      	ldr	r1, [r4, #32]
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	47b0      	blx	r6
 8000a70:	1c43      	adds	r3, r0, #1
 8000a72:	89a3      	ldrh	r3, [r4, #12]
 8000a74:	d106      	bne.n	8000a84 <__sflush_r+0x60>
 8000a76:	6829      	ldr	r1, [r5, #0]
 8000a78:	291d      	cmp	r1, #29
 8000a7a:	d82b      	bhi.n	8000ad4 <__sflush_r+0xb0>
 8000a7c:	4a28      	ldr	r2, [pc, #160]	@ (8000b20 <__sflush_r+0xfc>)
 8000a7e:	40ca      	lsrs	r2, r1
 8000a80:	07d6      	lsls	r6, r2, #31
 8000a82:	d527      	bpl.n	8000ad4 <__sflush_r+0xb0>
 8000a84:	2200      	movs	r2, #0
 8000a86:	6062      	str	r2, [r4, #4]
 8000a88:	04d9      	lsls	r1, r3, #19
 8000a8a:	6922      	ldr	r2, [r4, #16]
 8000a8c:	6022      	str	r2, [r4, #0]
 8000a8e:	d504      	bpl.n	8000a9a <__sflush_r+0x76>
 8000a90:	1c42      	adds	r2, r0, #1
 8000a92:	d101      	bne.n	8000a98 <__sflush_r+0x74>
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	b903      	cbnz	r3, 8000a9a <__sflush_r+0x76>
 8000a98:	6560      	str	r0, [r4, #84]	@ 0x54
 8000a9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a9c:	602f      	str	r7, [r5, #0]
 8000a9e:	b1b9      	cbz	r1, 8000ad0 <__sflush_r+0xac>
 8000aa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d002      	beq.n	8000aae <__sflush_r+0x8a>
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f000 fa21 	bl	8000ef0 <_free_r>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ab2:	e00d      	b.n	8000ad0 <__sflush_r+0xac>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	47b0      	blx	r6
 8000aba:	4602      	mov	r2, r0
 8000abc:	1c50      	adds	r0, r2, #1
 8000abe:	d1c9      	bne.n	8000a54 <__sflush_r+0x30>
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0c6      	beq.n	8000a54 <__sflush_r+0x30>
 8000ac6:	2b1d      	cmp	r3, #29
 8000ac8:	d001      	beq.n	8000ace <__sflush_r+0xaa>
 8000aca:	2b16      	cmp	r3, #22
 8000acc:	d11d      	bne.n	8000b0a <__sflush_r+0xe6>
 8000ace:	602f      	str	r7, [r5, #0]
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e021      	b.n	8000b18 <__sflush_r+0xf4>
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	e01a      	b.n	8000b12 <__sflush_r+0xee>
 8000adc:	690f      	ldr	r7, [r1, #16]
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d0f6      	beq.n	8000ad0 <__sflush_r+0xac>
 8000ae2:	0793      	lsls	r3, r2, #30
 8000ae4:	680e      	ldr	r6, [r1, #0]
 8000ae6:	bf08      	it	eq
 8000ae8:	694b      	ldreq	r3, [r1, #20]
 8000aea:	600f      	str	r7, [r1, #0]
 8000aec:	bf18      	it	ne
 8000aee:	2300      	movne	r3, #0
 8000af0:	1bf6      	subs	r6, r6, r7
 8000af2:	608b      	str	r3, [r1, #8]
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	ddeb      	ble.n	8000ad0 <__sflush_r+0xac>
 8000af8:	6a21      	ldr	r1, [r4, #32]
 8000afa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000afe:	4633      	mov	r3, r6
 8000b00:	463a      	mov	r2, r7
 8000b02:	4628      	mov	r0, r5
 8000b04:	47e0      	blx	ip
 8000b06:	2800      	cmp	r0, #0
 8000b08:	dc07      	bgt.n	8000b1a <__sflush_r+0xf6>
 8000b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b12:	81a3      	strh	r3, [r4, #12]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1a:	4407      	add	r7, r0
 8000b1c:	1a36      	subs	r6, r6, r0
 8000b1e:	e7e9      	b.n	8000af4 <__sflush_r+0xd0>
 8000b20:	20400001 	.word	0x20400001

08000b24 <_fflush_r>:
 8000b24:	b538      	push	{r3, r4, r5, lr}
 8000b26:	690b      	ldr	r3, [r1, #16]
 8000b28:	4605      	mov	r5, r0
 8000b2a:	460c      	mov	r4, r1
 8000b2c:	b913      	cbnz	r3, 8000b34 <_fflush_r+0x10>
 8000b2e:	2500      	movs	r5, #0
 8000b30:	4628      	mov	r0, r5
 8000b32:	bd38      	pop	{r3, r4, r5, pc}
 8000b34:	b118      	cbz	r0, 8000b3e <_fflush_r+0x1a>
 8000b36:	6a03      	ldr	r3, [r0, #32]
 8000b38:	b90b      	cbnz	r3, 8000b3e <_fflush_r+0x1a>
 8000b3a:	f7ff fe07 	bl	800074c <__sinit>
 8000b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f3      	beq.n	8000b2e <_fflush_r+0xa>
 8000b46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000b48:	07d0      	lsls	r0, r2, #31
 8000b4a:	d404      	bmi.n	8000b56 <_fflush_r+0x32>
 8000b4c:	0599      	lsls	r1, r3, #22
 8000b4e:	d402      	bmi.n	8000b56 <_fflush_r+0x32>
 8000b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b52:	f7ff fec2 	bl	80008da <__retarget_lock_acquire_recursive>
 8000b56:	4628      	mov	r0, r5
 8000b58:	4621      	mov	r1, r4
 8000b5a:	f7ff ff63 	bl	8000a24 <__sflush_r>
 8000b5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b60:	07da      	lsls	r2, r3, #31
 8000b62:	4605      	mov	r5, r0
 8000b64:	d4e4      	bmi.n	8000b30 <_fflush_r+0xc>
 8000b66:	89a3      	ldrh	r3, [r4, #12]
 8000b68:	059b      	lsls	r3, r3, #22
 8000b6a:	d4e1      	bmi.n	8000b30 <_fflush_r+0xc>
 8000b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b6e:	f7ff feb5 	bl	80008dc <__retarget_lock_release_recursive>
 8000b72:	e7dd      	b.n	8000b30 <_fflush_r+0xc>

08000b74 <__malloc_lock>:
 8000b74:	4801      	ldr	r0, [pc, #4]	@ (8000b7c <__malloc_lock+0x8>)
 8000b76:	f7ff beb0 	b.w	80008da <__retarget_lock_acquire_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	200001b8 	.word	0x200001b8

08000b80 <__malloc_unlock>:
 8000b80:	4801      	ldr	r0, [pc, #4]	@ (8000b88 <__malloc_unlock+0x8>)
 8000b82:	f7ff beab 	b.w	80008dc <__retarget_lock_release_recursive>
 8000b86:	bf00      	nop
 8000b88:	200001b8 	.word	0x200001b8

08000b8c <__sread>:
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	460c      	mov	r4, r1
 8000b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b94:	f000 f956 	bl	8000e44 <_read_r>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	bfab      	itete	ge
 8000b9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8000ba0:	181b      	addge	r3, r3, r0
 8000ba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ba6:	bfac      	ite	ge
 8000ba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000baa:	81a3      	strhlt	r3, [r4, #12]
 8000bac:	bd10      	pop	{r4, pc}

08000bae <__swrite>:
 8000bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb2:	461f      	mov	r7, r3
 8000bb4:	898b      	ldrh	r3, [r1, #12]
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	4605      	mov	r5, r0
 8000bba:	460c      	mov	r4, r1
 8000bbc:	4616      	mov	r6, r2
 8000bbe:	d505      	bpl.n	8000bcc <__swrite+0x1e>
 8000bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f000 f92a 	bl	8000e20 <_lseek_r>
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bd6:	81a3      	strh	r3, [r4, #12]
 8000bd8:	4632      	mov	r2, r6
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4628      	mov	r0, r5
 8000bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000be2:	f000 b951 	b.w	8000e88 <_write_r>

08000be6 <__sseek>:
 8000be6:	b510      	push	{r4, lr}
 8000be8:	460c      	mov	r4, r1
 8000bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bee:	f000 f917 	bl	8000e20 <_lseek_r>
 8000bf2:	1c43      	adds	r3, r0, #1
 8000bf4:	89a3      	ldrh	r3, [r4, #12]
 8000bf6:	bf15      	itete	ne
 8000bf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000bfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000bfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c02:	81a3      	strheq	r3, [r4, #12]
 8000c04:	bf18      	it	ne
 8000c06:	81a3      	strhne	r3, [r4, #12]
 8000c08:	bd10      	pop	{r4, pc}

08000c0a <__sclose>:
 8000c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c0e:	f000 b94d 	b.w	8000eac <_close_r>

08000c12 <__swbuf_r>:
 8000c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c14:	460e      	mov	r6, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	4605      	mov	r5, r0
 8000c1a:	b118      	cbz	r0, 8000c24 <__swbuf_r+0x12>
 8000c1c:	6a03      	ldr	r3, [r0, #32]
 8000c1e:	b90b      	cbnz	r3, 8000c24 <__swbuf_r+0x12>
 8000c20:	f7ff fd94 	bl	800074c <__sinit>
 8000c24:	69a3      	ldr	r3, [r4, #24]
 8000c26:	60a3      	str	r3, [r4, #8]
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	071a      	lsls	r2, r3, #28
 8000c2c:	d501      	bpl.n	8000c32 <__swbuf_r+0x20>
 8000c2e:	6923      	ldr	r3, [r4, #16]
 8000c30:	b943      	cbnz	r3, 8000c44 <__swbuf_r+0x32>
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	f000 f82b 	bl	8000c90 <__swsetup_r>
 8000c3a:	b118      	cbz	r0, 8000c44 <__swbuf_r+0x32>
 8000c3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000c40:	4638      	mov	r0, r7
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	6922      	ldr	r2, [r4, #16]
 8000c48:	1a98      	subs	r0, r3, r2
 8000c4a:	6963      	ldr	r3, [r4, #20]
 8000c4c:	b2f6      	uxtb	r6, r6
 8000c4e:	4283      	cmp	r3, r0
 8000c50:	4637      	mov	r7, r6
 8000c52:	dc05      	bgt.n	8000c60 <__swbuf_r+0x4e>
 8000c54:	4621      	mov	r1, r4
 8000c56:	4628      	mov	r0, r5
 8000c58:	f7ff ff64 	bl	8000b24 <_fflush_r>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d1ed      	bne.n	8000c3c <__swbuf_r+0x2a>
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	60a3      	str	r3, [r4, #8]
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	6022      	str	r2, [r4, #0]
 8000c6c:	701e      	strb	r6, [r3, #0]
 8000c6e:	6962      	ldr	r2, [r4, #20]
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__swbuf_r+0x6e>
 8000c76:	89a3      	ldrh	r3, [r4, #12]
 8000c78:	07db      	lsls	r3, r3, #31
 8000c7a:	d5e1      	bpl.n	8000c40 <__swbuf_r+0x2e>
 8000c7c:	2e0a      	cmp	r6, #10
 8000c7e:	d1df      	bne.n	8000c40 <__swbuf_r+0x2e>
 8000c80:	4621      	mov	r1, r4
 8000c82:	4628      	mov	r0, r5
 8000c84:	f7ff ff4e 	bl	8000b24 <_fflush_r>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d0d9      	beq.n	8000c40 <__swbuf_r+0x2e>
 8000c8c:	e7d6      	b.n	8000c3c <__swbuf_r+0x2a>
	...

08000c90 <__swsetup_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <__swsetup_r+0xa8>)
 8000c94:	4605      	mov	r5, r0
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	460c      	mov	r4, r1
 8000c9a:	b118      	cbz	r0, 8000ca4 <__swsetup_r+0x14>
 8000c9c:	6a03      	ldr	r3, [r0, #32]
 8000c9e:	b90b      	cbnz	r3, 8000ca4 <__swsetup_r+0x14>
 8000ca0:	f7ff fd54 	bl	800074c <__sinit>
 8000ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca8:	0719      	lsls	r1, r3, #28
 8000caa:	d422      	bmi.n	8000cf2 <__swsetup_r+0x62>
 8000cac:	06da      	lsls	r2, r3, #27
 8000cae:	d407      	bmi.n	8000cc0 <__swsetup_r+0x30>
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	602a      	str	r2, [r5, #0]
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb8:	81a3      	strh	r3, [r4, #12]
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cbe:	e033      	b.n	8000d28 <__swsetup_r+0x98>
 8000cc0:	0758      	lsls	r0, r3, #29
 8000cc2:	d512      	bpl.n	8000cea <__swsetup_r+0x5a>
 8000cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cc6:	b141      	cbz	r1, 8000cda <__swsetup_r+0x4a>
 8000cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d002      	beq.n	8000cd6 <__swsetup_r+0x46>
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f000 f90d 	bl	8000ef0 <_free_r>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000ce0:	81a3      	strh	r3, [r4, #12]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	6063      	str	r3, [r4, #4]
 8000ce6:	6923      	ldr	r3, [r4, #16]
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	81a3      	strh	r3, [r4, #12]
 8000cf2:	6923      	ldr	r3, [r4, #16]
 8000cf4:	b94b      	cbnz	r3, 8000d0a <__swsetup_r+0x7a>
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d00:	d003      	beq.n	8000d0a <__swsetup_r+0x7a>
 8000d02:	4621      	mov	r1, r4
 8000d04:	4628      	mov	r0, r5
 8000d06:	f000 f83f 	bl	8000d88 <__smakebuf_r>
 8000d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d0e:	f013 0201 	ands.w	r2, r3, #1
 8000d12:	d00a      	beq.n	8000d2a <__swsetup_r+0x9a>
 8000d14:	2200      	movs	r2, #0
 8000d16:	60a2      	str	r2, [r4, #8]
 8000d18:	6962      	ldr	r2, [r4, #20]
 8000d1a:	4252      	negs	r2, r2
 8000d1c:	61a2      	str	r2, [r4, #24]
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	b942      	cbnz	r2, 8000d34 <__swsetup_r+0xa4>
 8000d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d26:	d1c5      	bne.n	8000cb4 <__swsetup_r+0x24>
 8000d28:	bd38      	pop	{r3, r4, r5, pc}
 8000d2a:	0799      	lsls	r1, r3, #30
 8000d2c:	bf58      	it	pl
 8000d2e:	6962      	ldrpl	r2, [r4, #20]
 8000d30:	60a2      	str	r2, [r4, #8]
 8000d32:	e7f4      	b.n	8000d1e <__swsetup_r+0x8e>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7f7      	b.n	8000d28 <__swsetup_r+0x98>
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <__swhatbuf_r>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	460c      	mov	r4, r1
 8000d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d44:	2900      	cmp	r1, #0
 8000d46:	b096      	sub	sp, #88	@ 0x58
 8000d48:	4615      	mov	r5, r2
 8000d4a:	461e      	mov	r6, r3
 8000d4c:	da0d      	bge.n	8000d6a <__swhatbuf_r+0x2e>
 8000d4e:	89a3      	ldrh	r3, [r4, #12]
 8000d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d54:	f04f 0100 	mov.w	r1, #0
 8000d58:	bf14      	ite	ne
 8000d5a:	2340      	movne	r3, #64	@ 0x40
 8000d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d60:	2000      	movs	r0, #0
 8000d62:	6031      	str	r1, [r6, #0]
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	b016      	add	sp, #88	@ 0x58
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
 8000d6a:	466a      	mov	r2, sp
 8000d6c:	f000 f8ae 	bl	8000ecc <_fstat_r>
 8000d70:	2800      	cmp	r0, #0
 8000d72:	dbec      	blt.n	8000d4e <__swhatbuf_r+0x12>
 8000d74:	9901      	ldr	r1, [sp, #4]
 8000d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d7e:	4259      	negs	r1, r3
 8000d80:	4159      	adcs	r1, r3
 8000d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d86:	e7eb      	b.n	8000d60 <__swhatbuf_r+0x24>

08000d88 <__smakebuf_r>:
 8000d88:	898b      	ldrh	r3, [r1, #12]
 8000d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d8c:	079d      	lsls	r5, r3, #30
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460c      	mov	r4, r1
 8000d92:	d507      	bpl.n	8000da4 <__smakebuf_r+0x1c>
 8000d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	6123      	str	r3, [r4, #16]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	6163      	str	r3, [r4, #20]
 8000da0:	b003      	add	sp, #12
 8000da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da4:	ab01      	add	r3, sp, #4
 8000da6:	466a      	mov	r2, sp
 8000da8:	f7ff ffc8 	bl	8000d3c <__swhatbuf_r>
 8000dac:	9f00      	ldr	r7, [sp, #0]
 8000dae:	4605      	mov	r5, r0
 8000db0:	4639      	mov	r1, r7
 8000db2:	4630      	mov	r0, r6
 8000db4:	f7ff fdb6 	bl	8000924 <_malloc_r>
 8000db8:	b948      	cbnz	r0, 8000dce <__smakebuf_r+0x46>
 8000dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dbe:	059a      	lsls	r2, r3, #22
 8000dc0:	d4ee      	bmi.n	8000da0 <__smakebuf_r+0x18>
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	81a3      	strh	r3, [r4, #12]
 8000dcc:	e7e2      	b.n	8000d94 <__smakebuf_r+0xc>
 8000dce:	89a3      	ldrh	r3, [r4, #12]
 8000dd0:	6020      	str	r0, [r4, #0]
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd6:	81a3      	strh	r3, [r4, #12]
 8000dd8:	9b01      	ldr	r3, [sp, #4]
 8000dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000dde:	b15b      	cbz	r3, 8000df8 <__smakebuf_r+0x70>
 8000de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000de4:	4630      	mov	r0, r6
 8000de6:	f000 f80b 	bl	8000e00 <_isatty_r>
 8000dea:	b128      	cbz	r0, 8000df8 <__smakebuf_r+0x70>
 8000dec:	89a3      	ldrh	r3, [r4, #12]
 8000dee:	f023 0303 	bic.w	r3, r3, #3
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	81a3      	strh	r3, [r4, #12]
 8000df8:	89a3      	ldrh	r3, [r4, #12]
 8000dfa:	431d      	orrs	r5, r3
 8000dfc:	81a5      	strh	r5, [r4, #12]
 8000dfe:	e7cf      	b.n	8000da0 <__smakebuf_r+0x18>

08000e00 <_isatty_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d06      	ldr	r5, [pc, #24]	@ (8000e1c <_isatty_r+0x1c>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	602b      	str	r3, [r5, #0]
 8000e0c:	f7ff fb9b 	bl	8000546 <_isatty>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	d102      	bne.n	8000e1a <_isatty_r+0x1a>
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	b103      	cbz	r3, 8000e1a <_isatty_r+0x1a>
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	200001c4 	.word	0x200001c4

08000e20 <_lseek_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4d07      	ldr	r5, [pc, #28]	@ (8000e40 <_lseek_r+0x20>)
 8000e24:	4604      	mov	r4, r0
 8000e26:	4608      	mov	r0, r1
 8000e28:	4611      	mov	r1, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	602a      	str	r2, [r5, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f7ff fb93 	bl	800055a <_lseek>
 8000e34:	1c43      	adds	r3, r0, #1
 8000e36:	d102      	bne.n	8000e3e <_lseek_r+0x1e>
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	b103      	cbz	r3, 8000e3e <_lseek_r+0x1e>
 8000e3c:	6023      	str	r3, [r4, #0]
 8000e3e:	bd38      	pop	{r3, r4, r5, pc}
 8000e40:	200001c4 	.word	0x200001c4

08000e44 <_read_r>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4d07      	ldr	r5, [pc, #28]	@ (8000e64 <_read_r+0x20>)
 8000e48:	4604      	mov	r4, r0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	2200      	movs	r2, #0
 8000e50:	602a      	str	r2, [r5, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	f7ff fb24 	bl	80004a0 <_read>
 8000e58:	1c43      	adds	r3, r0, #1
 8000e5a:	d102      	bne.n	8000e62 <_read_r+0x1e>
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	b103      	cbz	r3, 8000e62 <_read_r+0x1e>
 8000e60:	6023      	str	r3, [r4, #0]
 8000e62:	bd38      	pop	{r3, r4, r5, pc}
 8000e64:	200001c4 	.word	0x200001c4

08000e68 <_sbrk_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	4d06      	ldr	r5, [pc, #24]	@ (8000e84 <_sbrk_r+0x1c>)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	602b      	str	r3, [r5, #0]
 8000e74:	f7ff fb7e 	bl	8000574 <_sbrk>
 8000e78:	1c43      	adds	r3, r0, #1
 8000e7a:	d102      	bne.n	8000e82 <_sbrk_r+0x1a>
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	b103      	cbz	r3, 8000e82 <_sbrk_r+0x1a>
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	bd38      	pop	{r3, r4, r5, pc}
 8000e84:	200001c4 	.word	0x200001c4

08000e88 <_write_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	4d07      	ldr	r5, [pc, #28]	@ (8000ea8 <_write_r+0x20>)
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4611      	mov	r1, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	602a      	str	r2, [r5, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	f7ff fb1f 	bl	80004da <_write>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_write_r+0x1e>
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_write_r+0x1e>
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	200001c4 	.word	0x200001c4

08000eac <_close_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4d06      	ldr	r5, [pc, #24]	@ (8000ec8 <_close_r+0x1c>)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	602b      	str	r3, [r5, #0]
 8000eb8:	f7ff fb2b 	bl	8000512 <_close>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_close_r+0x1a>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_close_r+0x1a>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	200001c4 	.word	0x200001c4

08000ecc <_fstat_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4d07      	ldr	r5, [pc, #28]	@ (8000eec <_fstat_r+0x20>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	602b      	str	r3, [r5, #0]
 8000eda:	f7ff fb25 	bl	8000528 <_fstat>
 8000ede:	1c43      	adds	r3, r0, #1
 8000ee0:	d102      	bne.n	8000ee8 <_fstat_r+0x1c>
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	b103      	cbz	r3, 8000ee8 <_fstat_r+0x1c>
 8000ee6:	6023      	str	r3, [r4, #0]
 8000ee8:	bd38      	pop	{r3, r4, r5, pc}
 8000eea:	bf00      	nop
 8000eec:	200001c4 	.word	0x200001c4

08000ef0 <_free_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4605      	mov	r5, r0
 8000ef4:	2900      	cmp	r1, #0
 8000ef6:	d041      	beq.n	8000f7c <_free_r+0x8c>
 8000ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000efc:	1f0c      	subs	r4, r1, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bfb8      	it	lt
 8000f02:	18e4      	addlt	r4, r4, r3
 8000f04:	f7ff fe36 	bl	8000b74 <__malloc_lock>
 8000f08:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <_free_r+0x90>)
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	b933      	cbnz	r3, 8000f1c <_free_r+0x2c>
 8000f0e:	6063      	str	r3, [r4, #4]
 8000f10:	6014      	str	r4, [r2, #0]
 8000f12:	4628      	mov	r0, r5
 8000f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f18:	f7ff be32 	b.w	8000b80 <__malloc_unlock>
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <_free_r+0x42>
 8000f20:	6820      	ldr	r0, [r4, #0]
 8000f22:	1821      	adds	r1, r4, r0
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf01      	itttt	eq
 8000f28:	6819      	ldreq	r1, [r3, #0]
 8000f2a:	685b      	ldreq	r3, [r3, #4]
 8000f2c:	1809      	addeq	r1, r1, r0
 8000f2e:	6021      	streq	r1, [r4, #0]
 8000f30:	e7ed      	b.n	8000f0e <_free_r+0x1e>
 8000f32:	461a      	mov	r2, r3
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	b10b      	cbz	r3, 8000f3c <_free_r+0x4c>
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d9fa      	bls.n	8000f32 <_free_r+0x42>
 8000f3c:	6811      	ldr	r1, [r2, #0]
 8000f3e:	1850      	adds	r0, r2, r1
 8000f40:	42a0      	cmp	r0, r4
 8000f42:	d10b      	bne.n	8000f5c <_free_r+0x6c>
 8000f44:	6820      	ldr	r0, [r4, #0]
 8000f46:	4401      	add	r1, r0
 8000f48:	1850      	adds	r0, r2, r1
 8000f4a:	4283      	cmp	r3, r0
 8000f4c:	6011      	str	r1, [r2, #0]
 8000f4e:	d1e0      	bne.n	8000f12 <_free_r+0x22>
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	6053      	str	r3, [r2, #4]
 8000f56:	4408      	add	r0, r1
 8000f58:	6010      	str	r0, [r2, #0]
 8000f5a:	e7da      	b.n	8000f12 <_free_r+0x22>
 8000f5c:	d902      	bls.n	8000f64 <_free_r+0x74>
 8000f5e:	230c      	movs	r3, #12
 8000f60:	602b      	str	r3, [r5, #0]
 8000f62:	e7d6      	b.n	8000f12 <_free_r+0x22>
 8000f64:	6820      	ldr	r0, [r4, #0]
 8000f66:	1821      	adds	r1, r4, r0
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf04      	itt	eq
 8000f6c:	6819      	ldreq	r1, [r3, #0]
 8000f6e:	685b      	ldreq	r3, [r3, #4]
 8000f70:	6063      	str	r3, [r4, #4]
 8000f72:	bf04      	itt	eq
 8000f74:	1809      	addeq	r1, r1, r0
 8000f76:	6021      	streq	r1, [r4, #0]
 8000f78:	6054      	str	r4, [r2, #4]
 8000f7a:	e7ca      	b.n	8000f12 <_free_r+0x22>
 8000f7c:	bd38      	pop	{r3, r4, r5, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001c0 	.word	0x200001c0

08000f84 <_init>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr

08000f90 <_fini>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr
