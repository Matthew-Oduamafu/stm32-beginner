/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define MASK(X) (1<<X)
#define MASK_POS(BITS, POS) (BITS<<POS)

int main(void)
{
	// address to Clock register
	volatile uint32_t *const pRCC_AHB1ENR = (volatile uint32_t *const) 0x40023830;
	// address to PORT D Mode register
	volatile uint32_t *const pGPIOD_MODER = (volatile uint32_t *const) 0x40020C00;
	// address to PORT A Mode register
	volatile uint32_t *const pGPIOA_MODER = (volatile uint32_t *const) (0x40020000);
	// address to PORT D Output Data register
	volatile uint32_t *const pGPIOD_ODR = (volatile uint32_t *const) 0x40020C14;
	// address to PORT A Input Data register
	volatile uint32_t *const pGPIOA_IDR = (volatile uint32_t *const) (0x40020010);

	// enable port D & A Clock
	*pRCC_AHB1ENR |= (MASK(3) | MASK(0)); //port D is position 3 and point A is position 0

	// set mode of pin 12 for port D to output mode
	*pGPIOD_MODER |= MASK_POS(0x01, 24);

	// set mode of pin 0 for port A to input mode
	*pGPIOA_MODER &= ~MASK_POS(0x03, 0);

    /* Loop forever */
	for(;;){
		if(*pGPIOA_IDR & (MASK(0))){
			// turn led at position 12
			*pGPIOD_ODR |= MASK(12);
		}else{
			*pGPIOD_ODR |= MASK(12);
		}
	}
}
