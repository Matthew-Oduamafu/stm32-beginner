/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define MASK(X) (1<<X)
#define MASK_POS(BITS, POS) (BITS<<POS)
#define R1 0
#define R2 1
#define R3 2
#define R4 3
#define C1 8
#define C2 9
#define C3 10
#define C4 11

static void delay(void);

int main(void) {
	printf("\n\nProgram starting...\n\n");
	// address to PORT D Clock register
	volatile uint32_t *const pRCC_AHB1ENR = (volatile uint32_t* const ) 0x40023830;
	// address to PORT D Mode register
	volatile uint32_t *const pGPIOD_MODER = (volatile uint32_t* const ) 0x40020C00;
	// address to PORT D Output Data register
	volatile uint32_t *const pGPIOD_ODR = (volatile uint32_t* const ) 0x40020C14;
	// address to PORT D Input Data register
	volatile uint32_t *const pGPIOD_IDR = (volatile uint32_t* const ) 0x40020C10;
	// address to PORT D pull-up/pull-down register
	volatile uint32_t *const pGPIOD_PUPDR = (volatile uint32_t* const ) 0x40020C0C;

	// enable port D Clock
	*pRCC_AHB1ENR |= MASK(3);

	// set PD8 to PD11 mode as input mode(thus, the columns)
	*pGPIOD_MODER &= ~(MASK_POS(0x3, C1*2) | MASK_POS(0x3, C2*2) | MASK_POS(0x3, C3*2)| MASK_POS(0x3, C4*2));

	// set PD0 to PD3 mode as out mode(thus rows)
	*pGPIOD_MODER |= (MASK_POS(0x1, R1*2) | MASK_POS(0x1, R2*2) | MASK_POS(0x1, R3*2)| MASK_POS(0x1, R4*2));

	// set PD8 to PD11 PUPDR as Pull Up mode(thus the columns)
	*pGPIOD_PUPDR |= (MASK_POS(0x1, C1*2) | MASK_POS(0x1, C2*2) | MASK_POS(0x1, C3*2)| MASK_POS(0x1, C4*2));

	// set all the outputs to high(thus the columns)
	*pGPIOD_ODR |= (MASK(R1) | MASK(R2) | MASK(R3) | MASK(R4));

	/* Loop forever */
	for (;;){
		*pGPIOD_IDR &= ~MASK(R1);
		if(!(*pGPIOD_IDR & MASK(C1))){
			printf("Key is 1\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
			printf("Key is 2\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
			printf("Key is 3\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
			printf("Key is A\n");
		}

		delay();


		*pGPIOD_IDR |= MASK(R1);
		*pGPIOD_IDR &= ~MASK(R2);
		if(!(*pGPIOD_IDR & MASK(C1))){
			printf("Key is 4\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
			printf("Key is 5\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
			printf("Key is 6\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
			printf("Key is B\n");
		}

		delay();


		*pGPIOD_IDR |= MASK(R2);
		*pGPIOD_IDR &= ~MASK(R3);
		if(!(*pGPIOD_IDR & MASK(C1))){
			printf("Key is 7\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
			printf("Key is 8\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
			printf("Key is 9\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
			printf("Key is C\n");
		}

		delay();


		*pGPIOD_IDR |= MASK(R3);
		*pGPIOD_IDR &= ~MASK(R4);
		if(!(*pGPIOD_IDR & MASK(C1))){
			printf("Key is *\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C2))){
			printf("Key is 0\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C3))){
			printf("Key is #\n");
		}
		else if(!(*pGPIOD_IDR & MASK(C4))){
			printf("Key is 0\n");
		}

		delay();

		*pGPIOD_IDR |= MASK(R4);
	}
}

static void delay(void){
	for(int i = 0; i < 100000; ++i);
}
